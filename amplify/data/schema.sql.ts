/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from "@aws-amplify/data-schema";
import { configure } from "@aws-amplify/data-schema/internals";
import { secret } from "@aws-amplify/backend";

export const schema = configure({
    database: {
        identifier: "IDWcRqQIptgOAjztPYSf2kyg",
        engine: "mysql",
        connectionUri: secret("SQL_CONNECTION_STRING"),
        vpcConfig: {
            vpcId: "vpc-0801688572a1279e3",
            securityGroupIds: [
                "sg-0d1ac65f0692ba4d5"
            ],
            subnetAvailabilityZones: [
                {
                    subnetId: "subnet-0f362958105530771",
                    availabilityZone: "us-west-1a"
                },
                {
                    subnetId: "subnet-080dbe87b90ce05e7",
                    availabilityZone: "us-west-1c"
                }
            ]
        }
    }
}).schema({
    "addresses": a.model({
        address_id: a.string().required(),
        member_id: a.string().required(),
        address1: a.string().required(),
        address2: a.string().required(),
        city: a.string().required(),
        state: a.string().required(),
        zip: a.string().required()
    }).identifier([
        "address_id"
    ]),
    "availability": a.model({
        availability_id: a.string().required(),
        member_id: a.string().required(),
        blockOutDay: a.string().required()
    }).identifier([
        "availability_id"
    ]),
    "church_member": a.model({
        church_member_id: a.string().required(),
        church_id: a.string().required(),
        member_id: a.string().required()
    }).identifier([
        "church_member_id"
    ]),
    "churches": a.model({
        church_id: a.string().required(),
        churchName: a.string().required()
    }).identifier([
        "church_id"
    ]),
    "emails": a.model({
        email_id: a.string().required(),
        member_id: a.string().required(),
        email: a.string().required(),
        isPrimary: a.string().required()
    }).identifier([
        "email_id"
    ]),
    "label_member": a.model({
        label_member_id: a.string().required(),
        label_id: a.string().required(),
        member_id: a.string().required(),
        isOwnerOfLabel: a.string().required()
    }).identifier([
        "label_member_id"
    ]),
    "labels": a.model({
        label_id: a.string().required(),
        labelName: a.string().required(),
        labelDescription: a.string().required(),
        church_id: a.string().required(),
        forSchedule: a.string().required(),
        scheduleGroup: a.string().required(),
        owner_id: a.string().required()
    }).identifier([
        "label_id"
    ]),
    "members": a.model({
        member_id: a.string().required(),
        first: a.string().required(),
        last: a.string().required(),
        sub: a.string().required(),
        notes: a.string().required(),
        gender: a.string().required()
    }).identifier([
        "member_id"
    ]),
    "phones": a.model({
        phone_id: a.string().required(),
        member_id: a.string().required(),
        pNumber: a.string().required(),
        isPrimary: a.string().required()
    }).identifier([
        "phone_id"
    ]),
    "schedule": a.model({
        schedule_id: a.string().required(),
        church_id: a.string().required(),
        service_id: a.string().required(),
        label_id: a.string().required(),
        member_id: a.string().required()
    }).identifier([
        "schedule_id"
    ]),
    "service": a.model({
        service_id: a.string().required(),
        church_id: a.string().required(),
        serviceTime: a.integer().required(),
        name: a.string().required(),
        info: a.string().required()
    }).identifier([
        "service_id"
    ])
});
